name: Create new release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (example : 3.2.0)"
        required: true
      publish:
        description: True to publish, false to create a draft
        default: 'false'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: master
        fetch-depth: 0
        persist-credentials: false

    - name: Generate changelog
      uses: LeChatErrant/auto-changelog-action@1.0
      with:
        token: ${{secrets.GITHUB_TOKEN}}
        output: CHANGELOG.md
        exclude_labels: duplicate,question,invalid,wontfix,dependencies
        future_release: ${{github.event.inputs.version}}

    - name: Create release
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        version: ${{github.event.inputs.version}}
        draft: ${{!github.event.inputs.publish}}
        script: |
          const fs = require('fs');

          const regex = new RegExp('^([0-9]+\.){0,2}([0-9]+)$');

          try {
            const { owner, repo } = context.repo;
            core.info(`Identified repository ${owner}/${repo}`);

            const version = core.getInput('version', { required: true });
            if (!regex.test(version)) {
              throw new Error(`${version} is not a valid versionning`);
            }
            
            core.info(`Creating tag ${version}`);
            
            const { data: { sha } } = await github.repos.getCommit({
              owner,
              repo,
              ref: 'refs/heads/master',
              mediaType: {
                format: 'sha'
              },
            });
            
            core.info(sha);
            
            await github.git.createTag({
              owner,
              repo,
              tag: version,
              message: `Release ${version}`,
              object: sha,
              type: 'commit',
            });
            
            core.info(`Creating release ${version}`);

            const draft = core.getInput('draft', { required: true }).toLowerCase() === 'true';
            core.info(`Draft mode : ${draft}`);

            const body = fs.readFileSync('CHANGELOG.md').toString();

            const res = await github.repos.createRelease({
              owner,
              repo,
              prerelease: false,
              draft: draft,
              name: version,
              tag_name: version,
              body,
            });
            core.info(JSON.stringify(res));
          } catch (error) {
            core.setFailed(error.message);
          }
